{"version":3,"sources":["components/navigation.jsx","stores/generator.js","components/seed-generator.jsx","components/seed-difficulty.jsx","components/seed-goal.jsx","components/seed-variant.jsx","components/seed-options.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","shards_react_es","type","theme","href","style","fontWeight","marginLeft","navbar","index_esm","color","size","React","Component","SeedGeneratorStore","isProcessing","isError","errorText","difficulty","goal","variant","mode","firebird","seed","setError","action","text","_this","clearError","setProcessing","clearProcessing","setSeed","setDifficulty","setGoal","setVariant","setMode","setFirebird","decorate","observable","seedGeneratorStore","SeedGenerator","observer","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showDownload","romUri","romName","spoilerUri","spoilerName","handleSubmit","bind","assertThisInitialized","handleDownloadRom","handleDownloadSpoiler","generateSeed","requestSeed","requestSpoiler","fileInput","createRef","seedInput","inherits","createClass","key","value","_generateSeed","asyncToGenerator","regenerator_default","mark","_callee","fileToUpload","wrap","_context","prev","next","t0","console","log","stop","_x","apply","arguments","_requestSeed","_callee2","formData","response","name","file","_context2","buildFormData","fetch","method","body","sent","parseResponse","blob","setState","window","URL","createObjectURL","_x2","_requestSpoiler","_callee3","_context3","concat","event","preventDefault","current","files","length","isNaN","_this$state","document","appendChild","download","click","remove","_this$state2","Math","floor","random","required","className","ref","onChange","e","target","onClick","handleRandomizeSeed","marginTop","FormData","append","d","headers","get","split","i","idx","indexOf","substring","SeedDifficulty","changeDifficulty","_this2","inline","checked","SeedGoal","SeedVariant","toggleFirebird","SeedOptions","seed_difficulty","seed_goal","seed_variant","App","react","navigation_Navigation","seed_generator","seed_options_SeedOptions","open","toggle","verticalAlign","display","flexDirection","justifyContent","alignItems","ClipLoader_default","sizeUnit","loading","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAIqBA,mLAEb,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,KAAK,OAAOC,MAAM,WACtBL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaG,KAAK,KAAIN,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CAAEC,WAAY,SAA3B,+BAAsER,EAAAC,EAAAC,cAAA,QAAMK,MAAO,CAAEE,WAAY,KAA3B,WAC5FT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKO,QAAM,GACPV,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAASH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAASG,KAAK,0CAAyCN,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAUC,MAAM,QAAQC,KAAK,kBANzEC,IAAMC,2CCDxCC,mDACFC,cAAe,OACfC,SAAU,OACVC,UAAY,UACZC,WAAa,cACbC,KAAO,iBACPC,QAAU,YACVC,KAAO,mBACPC,UAAW,OACXC,KAAO,OAEPC,SAAWC,YAAO,WAAY,SAACC,GAC3BC,EAAKX,SAAU,EACfW,EAAKV,UAAYS,SAGrBE,WAAaH,YAAO,aAAc,WAC9BE,EAAKX,SAAU,SAGnBa,cAAgBJ,YAAO,gBAAiB,WACpCE,EAAKZ,cAAe,SAGxBe,gBAAkBL,YAAO,kBAAmB,WACxCE,EAAKZ,cAAe,SAGxBgB,QAAUN,YAAO,UAAW,SAACF,GACzBI,EAAKJ,KAAOA,SAGhBS,cAAgBP,YAAO,gBAAiB,SAACP,GACrCS,EAAKT,WAAaA,SAGtBe,QAAUR,YAAO,UAAW,SAACN,GACzBQ,EAAKR,KAAOA,SAGhBe,WAAaT,YAAO,aAAc,SAACL,GAC/BO,EAAKP,QAAUA,SAGnBe,QAAUV,YAAO,UAAW,SAACJ,GACzBM,EAAKN,KAAOA,SAGhBe,YAAcX,YAAO,cAAe,SAACH,GACjCK,EAAKL,SAAWA,KAIxBe,YAASvB,EAAoB,CACzBC,aAAcuB,IACdtB,QAASsB,IACTrB,UAAWqB,IACXf,KAAMe,IACNpB,WAAYoB,IACZnB,KAAMmB,IACNjB,KAAMiB,IACNlB,QAASkB,IACThB,SAAUgB,MAGd,IACeC,EADY,IAAIzB,UCiIhB0B,EA/LOC,YAAQ,SAAAC,GAS1B,SAAAF,EAAYG,GAAO,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACfb,EAAAiB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMH,KATVO,MAAQ,CACJC,cAAc,EACdC,OAAQ,KACRC,QAAS,KACTC,WAAY,KACZC,YAAa,MAMb5B,EAAK6B,aAAe7B,EAAK6B,aAAaC,KAAlBb,OAAAc,EAAA,EAAAd,CAAAjB,IACpBA,EAAKgC,kBAAoBhC,EAAKgC,kBAAkBF,KAAvBb,OAAAc,EAAA,EAAAd,CAAAjB,IACzBA,EAAKiC,sBAAwBjC,EAAKiC,sBAAsBH,KAA3Bb,OAAAc,EAAA,EAAAd,CAAAjB,IAE7BA,EAAKkC,aAAelC,EAAKkC,aAAaJ,KAAlBb,OAAAc,EAAA,EAAAd,CAAAjB,IACpBA,EAAKmC,YAAcnC,EAAKmC,YAAYL,KAAjBb,OAAAc,EAAA,EAAAd,CAAAjB,IACnBA,EAAKoC,eAAiBpC,EAAKoC,eAAeN,KAApBb,OAAAc,EAAA,EAAAd,CAAAjB,IAEtBA,EAAKqC,UAAYpD,IAAMqD,YACvBtC,EAAKuC,UAAYtD,IAAMqD,YAZRtC,EATO,OAAAiB,OAAAuB,EAAA,EAAAvB,CAAAJ,EAAAE,GAAAE,OAAAwB,EAAA,EAAAxB,CAAAJ,EAAA,EAAA6B,IAAA,eAAAC,MAAA,eAAAC,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAA1E,EAAA2E,KAAA,SAAAC,EAwBPC,GAxBO,OAAAH,EAAA1E,EAAA8E,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAyBtBzC,EAAmBV,gBAzBGiD,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EA4BZlC,KAAKgB,YAAYc,GA5BL,cAAAE,EAAAE,KAAA,EA6BZlC,KAAKiB,iBA7BO,OA+BlBxB,EAAmBT,kBACnBS,EAAmBX,aAhCDkD,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAG,GAAAH,EAAA,SAmClBvC,EAAmBT,kBACnBS,EAAmBf,SAAS,iCAC5B0D,QAAQC,IAARL,EAAAG,IArCkB,yBAAAH,EAAAM,SAAAT,EAAA7B,KAAA,6BAAAuC,GAAA,OAAAd,EAAAe,MAAAxC,KAAAyC,YAAA,KAAAlB,IAAA,cAAAC,MAAA,eAAAkB,EAAA5C,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAA1E,EAAA2E,KAAA,SAAAe,EAyCRb,GAzCQ,IAAAc,EAAAC,EAAAC,EAAArE,EAAAsE,EAAA,OAAApB,EAAA1E,EAAA8E,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,cA0ClBU,EAAW5C,KAAKiD,cAAcnB,GA1CZkB,EAAAd,KAAA,EA4CCgB,MAAM,WAAY,CACrCC,OAAQ,OACRC,KAAMR,IA9CY,cA4ChBC,EA5CgBG,EAAAK,KAiDhBP,EAAO9C,KAAKsD,cAAcT,EAAU,YACpCpE,EAAOuB,KAAKsD,cAAcT,EAAU,QAlDpBG,EAAAd,KAAA,EAmDHW,EAASU,OAnDN,OAmDhBR,EAnDgBC,EAAAK,KAqDtB5D,EAAmBR,QAAQR,GAE3BuB,KAAKwD,SAAS,CACVnD,cAAc,EACdC,OAAQmD,OAAOC,IAAIC,gBAAgBZ,GACnCxC,QAASuC,IA1DS,yBAAAE,EAAAV,SAAAK,EAAA3C,SAAA,gBAAA4D,GAAA,OAAAlB,EAAAF,MAAAxC,KAAAyC,YAAA,KAAAlB,IAAA,iBAAAC,MAAA,eAAAqC,EAAA/D,OAAA4B,EAAA,EAAA5B,CAAA6B,EAAA1E,EAAA2E,KAAA,SAAAkC,IAAA,IAAArF,EAAAoE,EAAAE,EAAAD,EAAA,OAAAnB,EAAA1E,EAAA8E,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,cA+DdzD,EAASgB,EAAThB,KA/DcsF,EAAA7B,KAAA,EAiECgB,MAAK,YAAAc,OAAavF,EAAb,YAA6B,CACrD0E,OAAQ,QAlEU,cAiEhBN,EAjEgBkB,EAAAV,KAAAU,EAAA7B,KAAA,EAqEHW,EAASU,OArEN,OAqEhBR,EArEgBgB,EAAAV,KAsEhBP,EAAO9C,KAAKsD,cAAcT,EAAU,YAE1C7C,KAAKwD,SAAS,CACVhD,WAAYiD,OAAOC,IAAIC,gBAAgBZ,GACvCtC,YAAaqC,IA1EK,wBAAAiB,EAAAzB,SAAAwB,EAAA9D,SAAA,yBAAA6D,EAAArB,MAAAxC,KAAAyC,YAAA,KAAAlB,IAAA,eAAAC,MAAA,SA8EbyC,GAGT,GAFAA,EAAMC,iBAEsC,IAAxClE,KAAKkB,UAAUiD,QAAQC,MAAMC,OAMjC,GAAIC,MAAM7E,EAAmBhB,OAASgB,EAAmBhB,KAAO,EAC5DgB,EAAmBf,SAAS,4EADhC,CAKA,IAAMqE,EAAO/C,KAAKkB,UAAUiD,QAAQC,MAAM,GAE1CpE,KAAKe,aAAagC,QAZdtD,EAAmBf,SAAS,8CAlFV,CAAA6C,IAAA,oBAAAC,MAAA,WAiGN,IAAA+C,EACYvE,KAAKI,MAAzBE,EADQiE,EACRjE,OAAQC,EADAgE,EACAhE,QAEZtD,EAAIuH,SAAStH,cAAc,KAC3BsH,SAASpB,KAAKqB,YAAYxH,GAC1BA,EAAEM,MAAQ,gBACVN,EAAEK,KAAOgD,EACTrD,EAAEyH,SAAWnE,EACbtD,EAAE0H,QACF1H,EAAE2H,WA1GgB,CAAArD,IAAA,wBAAAC,MAAA,WA6GF,IAAAqD,EACgB7E,KAAKI,MAAjCI,EADYqE,EACZrE,WAAYC,EADAoE,EACApE,YAEhBxD,EAAIuH,SAAStH,cAAc,KAC3BsH,SAASpB,KAAKqB,YAAYxH,GAC1BA,EAAEM,MAAQ,gBACVN,EAAEK,KAAOkD,EACTvD,EAAEyH,SAAWjE,EACbxD,EAAE0H,QACF1H,EAAE2H,WAtHgB,CAAArD,IAAA,sBAAAC,MAAA,WA0HtB,IAGM/C,EAAOqG,KAAKC,MAAM,WAAAD,KAAKE,UAFjB,EAGZvF,EAAmBR,QAAQR,KA9HL,CAAA8C,IAAA,SAAAC,MAAA,WAiIjB,IACGnB,EAAiBL,KAAKI,MAAtBC,aAER,OACIrD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,oBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,kCAAyBF,EAAAC,EAAAC,cAAA,SAAO+H,UAAQ,EAACC,UAAU,eAAe9H,KAAK,OAAO+H,IAAKnF,KAAKkB,cAE5FlE,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAA,sBAAaF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWqE,MAAO/B,EAAmBhB,KAAM2G,SAAU,SAACC,GAAD,OAAO5F,EAAmBR,QAAQoG,EAAEC,OAAO9D,QAASpE,KAAK,UAC3HJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQoI,QAASvF,KAAKwF,oBAAqBjI,MAAO,CAAEE,WAAY,KAAhE,mBAEJT,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQC,KAAK,SAASmI,QAASvF,KAAKU,cAApC,kBAGVL,GACErD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,MAAO,CAACkI,UAAW,KACpBzI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQoI,QAASvF,KAAKa,mBAAtB,2BACA7D,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQoI,QAASvF,KAAKc,sBAAuBvD,MAAO,CAAEE,WAAY,KAAlE,8BAxJM,CAAA8D,IAAA,gBAAAC,MAAA,SAkKZM,GACV,IAAIc,EAAW,IAAI8C,SASnB,OARA9C,EAAS+C,OAAO,KAAM7D,GACtBc,EAAS+C,OAAO,OAAoC,IAA5BlG,EAAmBhB,KAAa,KAAOgB,EAAmBhB,MAClFmE,EAAS+C,OAAO,aAAclG,EAAmBrB,YACjDwE,EAAS+C,OAAO,OAAQlG,EAAmBpB,MAC3CuE,EAAS+C,OAAO,UAAWlG,EAAmBnB,SAC9CsE,EAAS+C,OAAO,OAAQlG,EAAmBlB,MAC3CqE,EAAS+C,OAAO,WAAYlG,EAAmBjB,UAExCoE,IA5Ke,CAAArB,IAAA,gBAAAC,MAAA,SA+KZqB,EAAUtB,GAKpB,IAJA,IAEIqE,EAFK/C,EAASgD,QAAQC,IAAI,uBAEnBC,MAAM,KAERC,EAAI,EAAGA,EAAIJ,EAAEvB,SAAU2B,EAAG,CAC/B,IAAMC,EAAML,EAAEI,GAAGE,QAAQ3E,GAEzB,GAAI0E,GAAO,EACP,OAAOL,EAAEI,GAAGG,UAAUF,EAAM1E,EAAI8C,OAAS,GAGjD,OAAO,SA3Le3E,EAAA,CAA6B5B,IAAMC,YC8BlDqI,EA9BQzG,YAAQ,SAAAC,GAEvB,SAAAwG,EAAYvG,GAAO,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAAoG,IACfvH,EAAAiB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAsG,GAAAjG,KAAAH,KAAMH,KAEDwG,iBAAmBxH,EAAKwH,iBAAiB1F,KAAtBb,OAAAc,EAAA,EAAAd,CAAAjB,IAHTA,EAFI,OAAAiB,OAAAuB,EAAA,EAAAvB,CAAAsG,EAAAxG,GAAAE,OAAAwB,EAAA,EAAAxB,CAAAsG,EAAA,EAAA7E,IAAA,mBAAAC,MAAA,SAQNpD,GACbqB,EAAmBP,cAAcd,KATd,CAAAmD,IAAA,SAAAC,MAAA,WAYd,IAAA8E,EAAAtG,KACL,OACIhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,mBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,OAAO0D,QAA2C,SAAlC/G,EAAmBrB,WAAuBgH,SAAU,WAAQkB,EAAKD,iBAAiB,UAAzH,QACArJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,SAAS0D,QAA2C,WAAlC/G,EAAmBrB,WAAyBgH,SAAU,WAAQkB,EAAKD,iBAAiB,YAA7H,UACArJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,OAAO0D,QAA2C,SAAlC/G,EAAmBrB,WAAuBgH,SAAU,WAAQkB,EAAKD,iBAAiB,UAAzH,QACArJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,UAAU0D,QAA2C,YAAlC/G,EAAmBrB,WAA0BgH,SAAU,WAAQkB,EAAKD,iBAAiB,aAA/H,kBArBGD,EAAA,CACEtI,IAAMC,YC4BxB0I,EA7BE9G,YAAQ,SAAAC,GAEjB,SAAA6G,EAAY5G,GAAO,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAAyG,IACf5H,EAAAiB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA2G,GAAAtG,KAAAH,KAAMH,KAEDV,QAAUN,EAAKM,QAAQwB,KAAbb,OAAAc,EAAA,EAAAd,CAAAjB,IAHAA,EAFF,OAAAiB,OAAAuB,EAAA,EAAAvB,CAAA2G,EAAA7G,GAAAE,OAAAwB,EAAA,EAAAxB,CAAA2G,EAAA,EAAAlF,IAAA,UAAAC,MAAA,SAQTpD,GACJqB,EAAmBN,QAAQf,KATd,CAAAmD,IAAA,SAAAC,MAAA,WAYR,IAAA8E,EAAAtG,KACL,OACIhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWI,MAAO,CAACkI,UAAW,KAC1BzI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,aACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,YAAY0D,QAAqC,cAA5B/G,EAAmBpB,KAAsB+G,SAAU,WAAQkB,EAAKnH,QAAQ,eAApH,aACAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,iBAAiB0D,QAAqC,mBAA5B/G,EAAmBpB,KAA2B+G,SAAU,WAAQkB,EAAKnH,QAAQ,oBAA9H,kBACAnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,SAAS0D,QAAqC,WAA5B/G,EAAmBpB,KAAmB+G,SAAU,WAAQkB,EAAKnH,QAAQ,YAA9G,iBApBHsH,EAAA,CACE3I,IAAMC,YC6ClB2I,EA9CK/G,YAAQ,SAAAC,GAEpB,SAAA8G,EAAY7G,GAAO,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAA0G,IACf7H,EAAAiB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAA4G,GAAAvG,KAAAH,KAAMH,KAEDT,WAAaP,EAAKO,WAAWuB,KAAhBb,OAAAc,EAAA,EAAAd,CAAAjB,IAClBA,EAAKQ,QAAUR,EAAKQ,QAAQsB,KAAbb,OAAAc,EAAA,EAAAd,CAAAjB,IACfA,EAAKS,YAAcT,EAAK8H,eAAehG,KAApBb,OAAAc,EAAA,EAAAd,CAAAjB,IALJA,EAFC,OAAAiB,OAAAuB,EAAA,EAAAvB,CAAA4G,EAAA9G,GAAAE,OAAAwB,EAAA,EAAAxB,CAAA4G,EAAA,EAAAnF,IAAA,aAAAC,MAAA,SAUTlD,GACPmB,EAAmBL,WAAWd,KAXd,CAAAiD,IAAA,UAAAC,MAAA,SAcZjD,GACJkB,EAAmBJ,QAAQd,KAfX,CAAAgD,IAAA,iBAAAC,MAAA,WAmBhB/B,EAAmBH,aAAaG,EAAmBjB,YAnBnC,CAAA+C,IAAA,SAAAC,MAAA,WAsBX,IAAA8E,EAAAtG,KACL,OACIhD,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWI,MAAO,CAACkI,UAAW,KAC1BzI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,mBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,OAAO0D,QAAwC,SAA/B/G,EAAmBnB,QAAoB8G,SAAU,WAAQkB,EAAKlH,WAAW,UAAhH,QACApC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,OAAO0D,QAAwC,SAA/B/G,EAAmBnB,QAAoB8G,SAAU,WAAQkB,EAAKlH,WAAW,UAAhH,eAEJpC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,cAAc0D,QAAqC,gBAA5B/G,EAAmBlB,KAAwB6G,SAAU,WAAQkB,EAAKjH,QAAQ,iBAAxH,eACArC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,WAAW0D,QAAqC,aAA5B/G,EAAmBlB,KAAqB6G,SAAU,WAAQkB,EAAKjH,QAAQ,cAAlH,YACArC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWoJ,QAAM,EAACzD,KAAK,QAAQ0D,QAAqC,UAA5B/G,EAAmBlB,KAAkB6G,SAAU,WAAQkB,EAAKjH,QAAQ,WAA5G,iBAnCJqH,EAAA,CACE5I,IAAMC,YCDf6I,mLAEb,OACI5J,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAAC2J,EAAD,MACA7J,EAAAC,EAAAC,cAAC4J,EAAD,MACA9J,EAAAC,EAAAC,cAAC6J,EAAD,cANyBjJ,IAAMC,WCwDhCiJ,EA/CHrH,YAAQ,SAAAC,GAGhB,SAAAoH,EAAYnH,GAAO,IAAAhB,EAAA,OAAAiB,OAAAC,EAAA,EAAAD,CAAAE,KAAAgH,IACjBnI,EAAAiB,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkH,GAAA7G,KAAAH,KAAMH,KAEDf,WAAaD,EAAKC,WAAW6B,KAAhBb,OAAAc,EAAA,EAAAd,CAAAjB,IAHDA,EAHH,OAAAiB,OAAAuB,EAAA,EAAAvB,CAAAkH,EAAApH,GAAAE,OAAAwB,EAAA,EAAAxB,CAAAkH,EAAA,EAAAzF,IAAA,aAAAC,MAAA,WAUd/B,EAAmBX,eAVL,CAAAyC,IAAA,SAAAC,MAAA,WAcP,IACCtD,EAAqCuB,EAArCvB,QAASC,EAA4BsB,EAA5BtB,UAAWF,EAAiBwB,EAAjBxB,aAE5B,OACEjB,EAAAC,EAAAC,cAAC+J,EAAA,SAAD,KACEjK,EAAAC,EAAAC,cAACgK,EAAD,MACAlK,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,MAAO,CAAEkI,UAAW,KACvBzI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAACiK,EAAD,OACLnK,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAKH,EAAAC,EAAAC,cAACkK,EAAD,SAGPlJ,GACAlB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOkK,KAAMnJ,EAASoJ,OAAQtH,KAAKlB,YACjC9B,EAAAC,EAAAC,cAACC,EAAA,EAAD,eACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KAAWH,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAQC,MAAM,MAAML,MAAO,CAAEgK,cAAe,YAAvD,IAAuEpJ,IAGzEF,GACAjB,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOkK,KAAMpJ,EAAcqJ,OAAQ,cACjCtK,EAAAC,EAAAC,cAACC,EAAA,EAAD,wBACAH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWI,MAAO,CAACiK,QAAS,OAAQC,cAAe,SAAUC,eAAgB,SAAUC,WAAY,WAC/F3K,EAAAC,EAAAC,cAAC0K,EAAA3K,EAAD,CAAY4K,SAAU,KAAMhK,KAAM,IAAKD,MAAO,UAAWkK,SAAS,IAClE9K,EAAAC,EAAAC,cAAA,iCArCE8J,EAAA,CACAlJ,IAAMC,YCJNgK,QACW,cAA7BtE,OAAOuE,SAASC,UAEe,UAA7BxE,OAAOuE,SAASC,UAEhBxE,OAAOuE,SAASC,SAASC,MACvB,yECTNC,IAASC,OAAOpL,EAAAC,EAAAC,cAACmL,EAAD,MAAS7D,SAAS8D,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4f1de91b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'shards-react'\r\nimport { FaGithub } from 'react-icons/fa'\r\n\r\nexport default class Navigation extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar type=\"dark\" theme=\"primary\">\r\n                <NavbarBrand href=\"#\"><span style={{ fontWeight: 'bold'}}>Illusion of Gaia Randomizer</span><span style={{ marginLeft: 20}}>v1.5.1</span></NavbarBrand>\r\n                <Nav navbar>\r\n                    <NavItem><NavLink href=\"https://www.github.com/dontbagume/iogr\"><FaGithub color=\"white\" size=\"30\" /></NavLink></NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","import {  observable, action, decorate } from 'mobx'\r\n\r\n\r\nclass SeedGeneratorStore {\r\n    isProcessing = false\r\n    isError = false    \r\n    errorText = null\r\n    difficulty = 'normal'\r\n    goal = 'Dark Gaia'\r\n    variant = 'None'\r\n    mode = 'Completable'\r\n    firebird = false\r\n    seed = 0\r\n\r\n    setError = action('setError', (text) => {\r\n        this.isError = true\r\n        this.errorText = text\r\n    })\r\n\r\n    clearError = action('clearError', () => {\r\n        this.isError = false\r\n    })\r\n\r\n    setProcessing = action('setProcessing', () => {\r\n        this.isProcessing = true\r\n    })    \r\n\r\n    clearProcessing = action('clearProcessing', () => {\r\n        this.isProcessing = false\r\n    })\r\n\r\n    setSeed = action('setSeed', (seed) => {\r\n        this.seed = seed\r\n    })\r\n    \r\n    setDifficulty = action('setDifficulty', (difficulty) => {        \r\n        this.difficulty = difficulty\r\n    })\r\n\r\n    setGoal = action('setGoal', (goal) => {\r\n        this.goal = goal\r\n    })\r\n\r\n    setVariant = action('setVariant', (variant) => {\r\n        this.variant = variant\r\n    })\r\n\r\n    setMode = action('setMode', (mode) => {\r\n        this.mode = mode\r\n    })\r\n\r\n    setFirebird = action('setFirebird', (firebird) => {\r\n        this.firebird = firebird\r\n    })\r\n}\r\n\r\ndecorate(SeedGeneratorStore, {\r\n    isProcessing: observable,\r\n    isError: observable,\r\n    errorText: observable,\r\n    seed: observable,\r\n    difficulty: observable,\r\n    goal: observable,\r\n    mode: observable,\r\n    variant: observable,\r\n    firebird: observable\r\n})\r\n\r\nconst seedGeneratorStore = new SeedGeneratorStore()\r\nexport default seedGeneratorStore","import React from 'react'\r\nimport { Button, Card, CardBody, CardTitle, Container, Form, FormInput, FormGroup, Row } from \"shards-react\";\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\nimport { observer } from 'mobx-react';\r\n\r\nconst SeedGenerator = observer(class SeedGenerator extends React.Component {\r\n    state = {\r\n        showDownload: false,\r\n        romUri: null,\r\n        romName: null,\r\n        spoilerUri: null,\r\n        spoilerName: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleDownloadRom = this.handleDownloadRom.bind(this)\r\n        this.handleDownloadSpoiler = this.handleDownloadSpoiler.bind(this)\r\n\r\n        this.generateSeed = this.generateSeed.bind(this)\r\n        this.requestSeed = this.requestSeed.bind(this)\r\n        this.requestSpoiler = this.requestSpoiler.bind(this)\r\n\r\n        this.fileInput = React.createRef();\r\n        this.seedInput = React.createRef();\r\n    }\r\n\r\n    async generateSeed(fileToUpload) {\r\n        seedGeneratorStore.setProcessing()\r\n\r\n        try {\r\n            await this.requestSeed(fileToUpload)\r\n            await this.requestSpoiler()\r\n    \r\n            seedGeneratorStore.clearProcessing()\r\n            seedGeneratorStore.clearError()\r\n        }\r\n        catch(error) { \r\n            seedGeneratorStore.clearProcessing()\r\n            seedGeneratorStore.setError('Whoops! Something went wrong!')\r\n            console.log(error) \r\n        }\r\n    }\r\n\r\n    async requestSeed(fileToUpload) {\r\n        let formData = this.buildFormData(fileToUpload)\r\n\r\n        const response = await fetch('api/seed', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n\r\n        const name = this.parseResponse(response, 'filename')\r\n        const seed = this.parseResponse(response, 'seed')\r\n        const file = await response.blob()\r\n\r\n        seedGeneratorStore.setSeed(seed)\r\n\r\n        this.setState({\r\n            showDownload: true,\r\n            romUri: window.URL.createObjectURL(file),\r\n            romName: name,\r\n        })  \r\n    }\r\n\r\n    async requestSpoiler() {\r\n        const { seed } = seedGeneratorStore\r\n\r\n        const response = await fetch(`api/seed/${seed}/spoiler`, {\r\n            method: 'GET',\r\n        })\r\n\r\n        const file = await response.blob()\r\n        const name = this.parseResponse(response, 'filename')\r\n\r\n        this.setState({\r\n            spoilerUri: window.URL.createObjectURL(file),\r\n            spoilerName: name\r\n        })\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n                \r\n        if (this.fileInput.current.files.length === 0) {            \r\n            seedGeneratorStore.setError('Hey, man. You need to upload a ROM file.')\r\n            return\r\n        }\r\n\r\n\r\n        if (isNaN(seedGeneratorStore.seed) || seedGeneratorStore.seed < 0) {\r\n            seedGeneratorStore.setError('Hey, man. You need to enter a valid non-negative integer for a seed!')\r\n            return\r\n        }\r\n          \r\n        const file = this.fileInput.current.files[0]\r\n    \r\n        this.generateSeed(file)\r\n    }\r\n    \r\n    handleDownloadRom() {\r\n        const { romUri, romName } = this.state\r\n    \r\n        var a = document.createElement('a')\r\n            document.body.appendChild(a)\r\n            a.style = 'display: none'\r\n            a.href = romUri\r\n            a.download = romName\r\n            a.click()\r\n            a.remove()\r\n    }\r\n\r\n    handleDownloadSpoiler() {\r\n        const { spoilerUri, spoilerName } = this.state\r\n    \r\n        var a = document.createElement('a')\r\n            document.body.appendChild(a)\r\n            a.style = 'display: none'\r\n            a.href = spoilerUri\r\n            a.download = spoilerName\r\n            a.click()\r\n            a.remove()\r\n    }\r\n\r\n    handleRandomizeSeed() {\r\n        const max = 2147483648\r\n        const min = 0\r\n\r\n        const seed = Math.floor(Math.random() * (max - min + 1)) + min;\r\n        seedGeneratorStore.setSeed(seed)\r\n    }\r\n\r\n    render() {\r\n        const { showDownload } = this.state\r\n\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Rom Details</CardTitle>\r\n                        <Row>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <label> ROM File (*.sfc):<input required className=\"form-control\" type=\"file\" ref={this.fileInput} /></label>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <label> Seed:<FormInput value={seedGeneratorStore.seed} onChange={(e) => seedGeneratorStore.setSeed(e.target.value) } type=\"text\" /></label>\r\n                                <Button onClick={this.handleRandomizeSeed} style={{ marginLeft: 10 }}>Randomize Seed</Button>\r\n                            </FormGroup>            \r\n                            <Button type=\"submit\" onClick={this.handleSubmit}>Generate ROM</Button>\r\n                        </Form>\r\n                </Row>\r\n                { showDownload && (\r\n                    <Row style={{marginTop: 20}}>\r\n                        <Button onClick={this.handleDownloadRom}>Download Randomized ROM</Button>\r\n                        <Button onClick={this.handleDownloadSpoiler} style={{ marginLeft: 10 }}>Download Spoiler Log</Button>\r\n                    </Row>\r\n                )}\r\n                    </CardBody>\r\n                </Card>\r\n                \r\n            </Container>            \r\n        )\r\n    }\r\n\r\n    buildFormData(fileToUpload) {\r\n        let formData = new FormData()\r\n        formData.append(null, fileToUpload)\r\n        formData.append('seed', seedGeneratorStore.seed === 0 ? null : seedGeneratorStore.seed)\r\n        formData.append('difficulty', seedGeneratorStore.difficulty)\r\n        formData.append('goal', seedGeneratorStore.goal)\r\n        formData.append('variant', seedGeneratorStore.variant)\r\n        formData.append('mode', seedGeneratorStore.mode)\r\n        formData.append('firebird', seedGeneratorStore.firebird)\r\n\r\n        return formData\r\n    }\r\n\r\n    parseResponse(response, key) {\r\n        var cd = response.headers.get('content-disposition')  \r\n\r\n        var d = cd.split(';')\r\n\r\n        for (let i = 0; i < d.length; ++i) {\r\n            const idx = d[i].indexOf(key)\r\n\r\n            if (idx > -1) \r\n                return d[i].substring(idx + key.length + 1) \r\n        }\r\n        \r\n        return null\r\n    }\r\n})\r\n\r\nexport default SeedGenerator","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedDifficulty = observer(\r\n    class SeedDifficulty extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.changeDifficulty = this.changeDifficulty.bind(this)\r\n        }\r\n\r\n        changeDifficulty(difficulty) {\r\n            seedGeneratorStore.setDifficulty(difficulty)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Difficulty</CardTitle>\r\n                            <FormRadio inline name=\"easy\" checked={seedGeneratorStore.difficulty === \"easy\"} onChange={() => { this.changeDifficulty('easy')}}>Easy</FormRadio>\r\n                            <FormRadio inline name=\"normal\" checked={seedGeneratorStore.difficulty === \"normal\"} onChange={() => { this.changeDifficulty('normal')}}>Normal</FormRadio>\r\n                            <FormRadio inline name=\"hard\" checked={seedGeneratorStore.difficulty === \"hard\"} onChange={() => { this.changeDifficulty('hard')}}>Hard</FormRadio>\r\n                            <FormRadio inline name=\"extreme\" checked={seedGeneratorStore.difficulty === \"extreme\"} onChange={() => { this.changeDifficulty('extreme')}}>Extreme</FormRadio>\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedDifficulty","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedGoal = observer(\r\n    class SeedGoal extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setGoal = this.setGoal.bind(this)\r\n        }\r\n\r\n        setGoal(difficulty) {\r\n            seedGeneratorStore.setGoal(difficulty)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Goal</CardTitle>\r\n                            <FormRadio inline name=\"Dark Gaia\" checked={seedGeneratorStore.goal === \"Dark Gaia\"} onChange={() => { this.setGoal('Dark Gaia')}}>Dark Gaia</FormRadio>\r\n                            <FormRadio inline name=\"Red Jewel Hunt\" checked={seedGeneratorStore.goal === \"Red Jewel Hunt\"} onChange={() => { this.setGoal('Red Jewel Hunt')}}>Red Jewel Hunt</FormRadio>\r\n                            <FormRadio inline name=\"Random\" checked={seedGeneratorStore.goal === \"Random\"} onChange={() => { this.setGoal('Random')}}>Random</FormRadio>\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedGoal","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio, FormCheckbox, FormGroup } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedVariant = observer(\r\n    class SeedVariant extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setVariant = this.setVariant.bind(this)\r\n            this.setMode = this.setMode.bind(this)\r\n            this.setFirebird = this.toggleFirebird.bind(this)\r\n        }\r\n\r\n        setVariant(variant) {\r\n            seedGeneratorStore.setVariant(variant)\r\n        }\r\n\r\n        setMode(mode) {\r\n            seedGeneratorStore.setMode(mode)\r\n        }\r\n\r\n        toggleFirebird() {\r\n            seedGeneratorStore.setFirebird(!seedGeneratorStore.firebird)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Variations</CardTitle>\r\n                            <FormGroup>\r\n                                <FormRadio inline name=\"None\" checked={seedGeneratorStore.variant === \"None\"} onChange={() => { this.setVariant('None')}}>None</FormRadio>\r\n                                <FormRadio inline name=\"OHKO\" checked={seedGeneratorStore.variant === \"OHKO\"} onChange={() => { this.setVariant('OHKO')}}>One Hit KO</FormRadio>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormRadio inline name=\"Completable\" checked={seedGeneratorStore.mode === \"Completable\"} onChange={() => { this.setMode('Completable')}}>Completable</FormRadio>\r\n                                <FormRadio inline name=\"Beatable\" checked={seedGeneratorStore.mode === \"Beatable\"} onChange={() => { this.setMode('Beatable')}}>Beatable</FormRadio>\r\n                                <FormRadio inline name=\"Chaos\" checked={seedGeneratorStore.mode === \"Chaos\"} onChange={() => { this.setMode('Chaos')}}>Chaos</FormRadio>\r\n                            </FormGroup>\r\n                            {/* <FormCheckbox checked={seedGeneratorStore.firebird === true} onChange={() => { this.toggleFirebird()}}>Firebird</FormCheckbox>                             */}\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedVariant","import React from 'react'\r\nimport {  Container } from 'shards-react'\r\nimport SeedDifficulty from './seed-difficulty';\r\nimport SeedGoal from './seed-goal';\r\nimport SeedVariant from './seed-variant';\r\n\r\nexport default class SeedOptions extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <SeedDifficulty />\r\n                <SeedGoal />              \r\n                <SeedVariant />\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Fragment } from 'react';\n\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody } from \"shards-react\";\n\nimport { FaBomb } from 'react-icons/fa'\nimport ClipLoader from 'react-spinners/ClipLoader'\n\n\nimport Navigation from './components/navigation'\nimport SeedGenerator from './components/seed-generator'\n\nimport { observer } from 'mobx-react'\nimport seedGeneratorStore from './stores/generator'\nimport SeedOptions from './components/seed-options';\n\nconst App = observer(\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props)\n\n      this.clearError = this.clearError.bind(this)    \n    }  \n\n    clearError() {\n      seedGeneratorStore.clearError()\n    }\n\n\n    render() {\n      const { isError, errorText, isProcessing } = seedGeneratorStore\n\n      return (      \n        <Fragment>\n          <Navigation />\n          <Container>\n            <Row style={{ marginTop: 20}}>\n              <Col><SeedGenerator /></Col>\n              <Col><SeedOptions /></Col>\n            </Row>\n          </Container>\n          { isError && (\n            <Modal open={isError} toggle={this.clearError}>\n              <ModalHeader>Whoops</ModalHeader>\n              <ModalBody><FaBomb color=\"red\" style={{ verticalAlign: 'center' }} /> {errorText}</ModalBody>\n            </Modal>\n          )}\n          { isProcessing && (\n            <Modal open={isProcessing} toggle={() => {}}>\n              <ModalHeader>Generating Seed</ModalHeader>\n              <ModalBody style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                  <ClipLoader sizeUnit={\"px\"} size={150} color={'#123abc'} loading={true} />\n                  <span>Loading...</span>\n              </ModalBody>\n          </Modal>\n          )}\n        </Fragment>\n      );\n    }\n  }\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}