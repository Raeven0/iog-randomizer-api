{"version":3,"sources":["components/navigation.jsx","stores/generator.js","components/seed-generator.jsx","components/seed-difficulty.jsx","components/seed-goal.jsx","components/seed-variant.jsx","components/seed-options.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","shards_react_es","type","theme","href","style","fontWeight","marginLeft","navbar","index_esm","color","size","React","Component","SeedGeneratorStore","isProcessing","isError","errorText","difficulty","goal","variant","mode","firebird","seed","statues","statuesRandom","setError","action","text","_this","clearError","setProcessing","clearProcessing","setSeed","setDifficulty","setGoal","setVariant","setMode","setFirebird","setStatues","toggleStatuesRandom","decorate","observable","seedGeneratorStore","SeedGenerator","observer","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","showDownload","romUri","romName","spoilerUri","spoilerName","handleSubmit","bind","assertThisInitialized","handleDownloadRom","handleDownloadSpoiler","handleRandomizeSeed","generateSeed","requestSeed","requestSpoiler","fileInput","createRef","seedInput","inherits","createClass","key","value","_generateSeed","asyncToGenerator","regenerator_default","mark","_callee","fileToUpload","wrap","_context","prev","next","t0","console","log","stop","_x","apply","arguments","_requestSeed","_callee2","formData","response","name","file","_context2","buildFormData","fetch","method","body","sent","parseResponse","blob","setState","window","URL","createObjectURL","_x2","_requestSpoiler","_callee3","_context3","concat","event","preventDefault","current","files","length","isNaN","_this$state","document","appendChild","download","click","remove","_this$state2","getRandomInRange","required","className","ref","onChange","e","target","onClick","marginTop","FormData","append","d","headers","get","split","i","idx","indexOf","substring","min","max","Math","floor","random","SeedDifficulty","changeDifficulty","_this2","inline","checked","SeedGoal","setStatuesRandom","display","flexDirection","alignContent","alignItems","justifyContent","disabled","defaultValue","v","SeedVariant","toggleFirebird","SeedOptions","seed_difficulty","seed_goal","seed_variant","App","react","navigation_Navigation","seed_generator","seed_options_SeedOptions","open","toggle","verticalAlign","ClipLoader_default","sizeUnit","loading","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f2acbb6.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'shards-react'\r\nimport { FaGithub } from 'react-icons/fa'\r\n\r\nexport default class Navigation extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar type=\"dark\" theme=\"primary\">\r\n                <NavbarBrand href=\"#\"><span style={{ fontWeight: 'bold'}}>Illusion of Gaia Randomizer</span><span style={{ marginLeft: 20}}>v1.5.1</span></NavbarBrand>\r\n                <Nav navbar>\r\n                    <NavItem><NavLink href=\"https://www.github.com/dontbagume/iogr\"><FaGithub color=\"white\" size=\"30\" /></NavLink></NavItem>\r\n                </Nav>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","import {  observable, action, decorate } from 'mobx'\r\n\r\n\r\nclass SeedGeneratorStore {\r\n    isProcessing = false\r\n    isError = false    \r\n    errorText = null\r\n    difficulty = 'normal'\r\n    goal = 'Dark Gaia'\r\n    variant = 'None'\r\n    mode = 'Completable'\r\n    firebird = false\r\n    seed = 0\r\n    statues = 4\r\n    statuesRandom = false\r\n\r\n    setError = action('setError', (text) => {\r\n        this.isError = true\r\n        this.errorText = text\r\n    })\r\n\r\n    clearError = action('clearError', () => {\r\n        this.isError = false\r\n    })\r\n\r\n    setProcessing = action('setProcessing', () => {\r\n        this.isProcessing = true\r\n    })    \r\n\r\n    clearProcessing = action('clearProcessing', () => {\r\n        this.isProcessing = false\r\n    })\r\n\r\n    setSeed = action('setSeed', (seed) => {\r\n        this.seed = seed\r\n    })\r\n    \r\n    setDifficulty = action('setDifficulty', (difficulty) => {        \r\n        this.difficulty = difficulty\r\n    })\r\n\r\n    setGoal = action('setGoal', (goal) => {\r\n        this.goal = goal\r\n    })\r\n\r\n    setVariant = action('setVariant', (variant) => {\r\n        this.variant = variant\r\n    })\r\n\r\n    setMode = action('setMode', (mode) => {\r\n        this.mode = mode\r\n    })\r\n\r\n    setFirebird = action('setFirebird', (firebird) => {\r\n        this.firebird = firebird\r\n    })\r\n\r\n    setStatues = action('setStatues', (statues) => {\r\n        this.statues = statues\r\n    })\r\n\r\n    toggleStatuesRandom = action('setStatuesRandom', () => {\r\n        this.statuesRandom = !this.statuesRandom\r\n    })\r\n}\r\n\r\ndecorate(SeedGeneratorStore, {\r\n    isProcessing: observable,\r\n    isError: observable,\r\n    errorText: observable,\r\n    seed: observable,\r\n    difficulty: observable,\r\n    goal: observable,\r\n    mode: observable,\r\n    variant: observable,\r\n    firebird: observable,\r\n    statuesRandom: observable,\r\n    statues: observable\r\n})\r\n\r\nconst seedGeneratorStore = new SeedGeneratorStore()\r\nexport default seedGeneratorStore","import React from 'react'\r\nimport { Button, Card, CardBody, CardTitle, Container, Form, FormInput, FormGroup, Row } from \"shards-react\";\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\nimport { observer } from 'mobx-react';\r\n\r\nconst SeedGenerator = observer(class SeedGenerator extends React.Component {\r\n    state = {\r\n        showDownload: false,\r\n        romUri: null,\r\n        romName: null,\r\n        spoilerUri: null,\r\n        spoilerName: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleDownloadRom = this.handleDownloadRom.bind(this)\r\n        this.handleDownloadSpoiler = this.handleDownloadSpoiler.bind(this)\r\n        this.handleRandomizeSeed = this.handleRandomizeSeed.bind(this)\r\n        \r\n        this.generateSeed = this.generateSeed.bind(this)\r\n        this.requestSeed = this.requestSeed.bind(this)\r\n        this.requestSpoiler = this.requestSpoiler.bind(this)\r\n\r\n        this.fileInput = React.createRef();\r\n        this.seedInput = React.createRef();\r\n    }\r\n\r\n    async generateSeed(fileToUpload) {\r\n        seedGeneratorStore.setProcessing()\r\n\r\n        try {\r\n            await this.requestSeed(fileToUpload)\r\n            await this.requestSpoiler()\r\n    \r\n            seedGeneratorStore.clearProcessing()\r\n            seedGeneratorStore.clearError()\r\n        }\r\n        catch(error) { \r\n            seedGeneratorStore.clearProcessing()\r\n            seedGeneratorStore.setError('Whoops! Something went wrong!')\r\n            console.log(error) \r\n        }\r\n    }\r\n\r\n    async requestSeed(fileToUpload) {\r\n        let formData = this.buildFormData(fileToUpload)\r\n\r\n        const response = await fetch('api/seed', {\r\n            method: 'POST',\r\n            body: formData\r\n        })\r\n\r\n        const name = this.parseResponse(response, 'filename')\r\n        const seed = this.parseResponse(response, 'seed')\r\n        const file = await response.blob()\r\n\r\n        seedGeneratorStore.setSeed(seed)\r\n\r\n        this.setState({\r\n            showDownload: true,\r\n            romUri: window.URL.createObjectURL(file),\r\n            romName: name,\r\n        })  \r\n    }\r\n\r\n    async requestSpoiler() {\r\n        const { seed } = seedGeneratorStore\r\n\r\n        const response = await fetch(`api/seed/${seed}/spoiler`, {\r\n            method: 'GET',\r\n        })\r\n\r\n        const file = await response.blob()\r\n        const name = this.parseResponse(response, 'filename')\r\n\r\n        this.setState({\r\n            spoilerUri: window.URL.createObjectURL(file),\r\n            spoilerName: name\r\n        })\r\n    }\r\n\r\n    /*================================\r\n        Button Handlers\r\n    ================================*/\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n                \r\n        if (this.fileInput.current.files.length === 0) {            \r\n            seedGeneratorStore.setError('Hey, man. You need to upload a ROM file.')\r\n            return\r\n        }\r\n\r\n\r\n        if (isNaN(seedGeneratorStore.seed) || seedGeneratorStore.seed < 0) {\r\n            seedGeneratorStore.setError('Hey, man. You need to enter a valid non-negative integer for a seed!')\r\n            return\r\n        }\r\n\r\n        if (seedGeneratorStore.goal === 'Dark Gaia') {\r\n            if (isNaN(seedGeneratorStore.statues) || seedGeneratorStore.statues < 1 || seedGeneratorStore.statues > 6) {\r\n                console.log(seedGeneratorStore.statues)\r\n                seedGeneratorStore.setError('Hey, man. You need to enter a valid non-negative integer (between 1 and 6) for a statue count!')\r\n                return\r\n            }\r\n        }\r\n          \r\n        const file = this.fileInput.current.files[0]\r\n    \r\n        this.generateSeed(file)\r\n    }\r\n    \r\n    handleDownloadRom() {\r\n        const { romUri, romName } = this.state\r\n        \r\n        var a = document.createElement('a')\r\n            document.body.appendChild(a)\r\n            a.style = 'display: none'\r\n            a.href = romUri\r\n            a.download = romName\r\n            a.click()\r\n            a.remove()\r\n    }\r\n\r\n    handleDownloadSpoiler() {\r\n        const { spoilerUri, spoilerName } = this.state\r\n    \r\n        var a = document.createElement('a')\r\n            document.body.appendChild(a)\r\n            a.style = 'display: none'\r\n            a.href = spoilerUri\r\n            a.download = spoilerName\r\n            a.click()\r\n            a.remove()\r\n    }\r\n\r\n    handleRandomizeSeed() {\r\n        const max = 2147483648\r\n        const min = 0\r\n\r\n        const seed = this.getRandomInRange(min, max)\r\n        seedGeneratorStore.setSeed(seed)\r\n    }\r\n\r\n    render() {\r\n        const { showDownload } = this.state\r\n\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Rom Details</CardTitle>\r\n                        <Row>\r\n                        <Form>\r\n                            <FormGroup>\r\n                                <label> ROM File (*.sfc):<input required className=\"form-control\" type=\"file\" ref={this.fileInput} /></label>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <label> Seed:<FormInput value={seedGeneratorStore.seed} onChange={(e) => seedGeneratorStore.setSeed(e.target.value) } type=\"text\" /></label>\r\n                                <Button onClick={this.handleRandomizeSeed} style={{ marginLeft: 10 }}>Randomize Seed</Button>\r\n                            </FormGroup>            \r\n                            <Button type=\"submit\" onClick={this.handleSubmit}>Generate ROM</Button>\r\n                        </Form>\r\n                </Row>\r\n                { showDownload && (\r\n                    <Row style={{marginTop: 20}}>\r\n                        <Button onClick={this.handleDownloadRom}>Download Randomized ROM</Button>\r\n                        <Button onClick={this.handleDownloadSpoiler} style={{ marginLeft: 10 }}>Download Spoiler Log</Button>\r\n                    </Row>\r\n                )}\r\n                    </CardBody>\r\n                </Card>\r\n                \r\n            </Container>            \r\n        )\r\n    }\r\n\r\n    buildFormData(fileToUpload) {\r\n        let formData = new FormData()\r\n        formData.append(null, fileToUpload)\r\n        formData.append('seed', seedGeneratorStore.seed === 0 ? null : seedGeneratorStore.seed)\r\n        formData.append('difficulty', seedGeneratorStore.difficulty)\r\n        formData.append('goal', seedGeneratorStore.goal)\r\n        formData.append('variant', seedGeneratorStore.variant)\r\n        formData.append('mode', seedGeneratorStore.mode)\r\n        formData.append('firebird', seedGeneratorStore.firebird)\r\n        \r\n        if (seedGeneratorStore.goal === 'Dark Gaia') {\r\n            let statues = seedGeneratorStore.statues\r\n\r\n            if (seedGeneratorStore.statuesRandom) {\r\n                statues = this.getRandomInRange(0, 6)\r\n                console.log('Generating random statue count', statues)\r\n            }\r\n\r\n            formData.append('statues', statues)\r\n        }           \r\n\r\n        return formData\r\n    }\r\n\r\n    parseResponse(response, key) {\r\n        var cd = response.headers.get('content-disposition')  \r\n\r\n        var d = cd.split(';')\r\n\r\n        for (let i = 0; i < d.length; ++i) {\r\n            const idx = d[i].indexOf(key)\r\n\r\n            if (idx > -1)                                \r\n                return d[i].substring(idx + key.length + 1)             \r\n        }\r\n        \r\n        return null\r\n    }\r\n\r\n    getRandomInRange(min, max) {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min\r\n    }\r\n})\r\n\r\nexport default SeedGenerator","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedDifficulty = observer(\r\n    class SeedDifficulty extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.changeDifficulty = this.changeDifficulty.bind(this)\r\n        }\r\n\r\n        changeDifficulty(difficulty) {\r\n            seedGeneratorStore.setDifficulty(difficulty)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Difficulty</CardTitle>\r\n                            <FormRadio inline name=\"Easy\" checked={seedGeneratorStore.difficulty === \"Easy\"} onChange={() => { this.changeDifficulty('Easy')}}>Easy</FormRadio>\r\n                            <FormRadio inline name=\"Normal\" checked={seedGeneratorStore.difficulty === \"Normal\"} onChange={() => { this.changeDifficulty('Normal')}}>Normal</FormRadio>\r\n                            <FormRadio inline name=\"Hard\" checked={seedGeneratorStore.difficulty === \"Hard\"} onChange={() => { this.changeDifficulty('Hard')}}>Hard</FormRadio>\r\n                            <FormRadio inline name=\"Extreme\" checked={seedGeneratorStore.difficulty === \"Extreme\"} onChange={() => { this.changeDifficulty('Extreme')}}>Extreme</FormRadio>\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedDifficulty","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container,FormCheckbox, FormInput, FormGroup, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedGoal = observer(\r\n    class SeedGoal extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setStatuesRandom = this.setStatuesRandom.bind(this)\r\n        }\r\n\r\n        setGoal(difficulty) {\r\n            seedGeneratorStore.setGoal(difficulty)\r\n        }\r\n\r\n        setStatuesRandom() {\r\n            seedGeneratorStore.toggleStatuesRandom()\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Goal</CardTitle>\r\n                            <FormGroup>\r\n                                <FormRadio inline name=\"Dark Gaia\" checked={seedGeneratorStore.goal === \"Dark Gaia\"} onChange={() => { this.setGoal('Dark Gaia')}}>Dark Gaia</FormRadio>\r\n                                <FormRadio inline name=\"Red Jewel Hunt\" checked={seedGeneratorStore.goal === \"Red Jewel Hunt\"} onChange={() => { this.setGoal('Red Jewel Hunt')}}>Red Jewel Hunt</FormRadio>\r\n                                <FormRadio inline name=\"Random\" checked={seedGeneratorStore.goal === \"Random\"} onChange={() => { this.setGoal('Random')}}>Random</FormRadio>\r\n                            </FormGroup>\r\n                            { seedGeneratorStore.goal === 'Dark Gaia' && (\r\n                                <FormGroup style={{ display: 'flex', flexDirection: 'row', alignContent: 'center', alignItems: 'center', justifyContent: 'space-between'}}>\r\n                                    <label>Number of Statues (0 - 6): <FormInput disabled={seedGeneratorStore.statuesRandom} defaultValue={seedGeneratorStore.statues} onChange={ (v) => seedGeneratorStore.setStatues(v.target.value) } /></label>\r\n                                    <FormCheckbox inline checked={seedGeneratorStore.statuesRandom === true} onChange={this.setStatuesRandom}>Random</FormCheckbox>\r\n                                </FormGroup>\r\n                            )}                            \r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedGoal","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio, FormGroup } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedVariant = observer(\r\n    class SeedVariant extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setVariant = this.setVariant.bind(this)\r\n            this.setMode = this.setMode.bind(this)\r\n            this.setFirebird = this.toggleFirebird.bind(this)\r\n        }\r\n\r\n        setVariant(variant) {\r\n            seedGeneratorStore.setVariant(variant)\r\n        }\r\n\r\n        setMode(mode) {\r\n            seedGeneratorStore.setMode(mode)\r\n        }\r\n\r\n        toggleFirebird() {\r\n            seedGeneratorStore.setFirebird(!seedGeneratorStore.firebird)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Variations</CardTitle>\r\n                            <FormGroup>\r\n                                <FormRadio inline name=\"None\" checked={seedGeneratorStore.variant === \"None\"} onChange={() => { this.setVariant('None')}}>None</FormRadio>\r\n                                <FormRadio inline name=\"OHKO\" checked={seedGeneratorStore.variant === \"OHKO\"} onChange={() => { this.setVariant('OHKO')}}>One Hit KO</FormRadio>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <FormRadio inline name=\"Completable\" checked={seedGeneratorStore.mode === \"Completable\"} onChange={() => { this.setMode('Completable')}}>Completable</FormRadio>\r\n                                <FormRadio inline name=\"Beatable\" checked={seedGeneratorStore.mode === \"Beatable\"} onChange={() => { this.setMode('Beatable')}}>Beatable</FormRadio>\r\n                                <FormRadio inline name=\"Chaos\" checked={seedGeneratorStore.mode === \"Chaos\"} onChange={() => { this.setMode('Chaos')}}>Chaos</FormRadio>\r\n                            </FormGroup>\r\n                            {/* <FormCheckbox checked={seedGeneratorStore.firebird === true} onChange={() => { this.toggleFirebird()}}>Firebird</FormCheckbox>                             */}\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedVariant","import React from 'react'\r\nimport {  Container } from 'shards-react'\r\nimport SeedDifficulty from './seed-difficulty';\r\nimport SeedGoal from './seed-goal';\r\nimport SeedVariant from './seed-variant';\r\n\r\nexport default class SeedOptions extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <SeedDifficulty />\r\n                <SeedGoal />              \r\n                <SeedVariant />\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Fragment } from 'react';\n\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody } from \"shards-react\";\n\nimport { FaBomb } from 'react-icons/fa'\nimport ClipLoader from 'react-spinners/ClipLoader'\n\n\nimport Navigation from './components/navigation'\nimport SeedGenerator from './components/seed-generator'\n\nimport { observer } from 'mobx-react'\nimport seedGeneratorStore from './stores/generator'\nimport SeedOptions from './components/seed-options';\n\nconst App = observer(\n  class App extends React.Component {\n\n    constructor(props) {\n      super(props)\n\n      this.clearError = this.clearError.bind(this)    \n    }  \n\n    clearError() {\n      seedGeneratorStore.clearError()\n    }\n\n\n    render() {\n      const { isError, errorText, isProcessing } = seedGeneratorStore\n\n      return (      \n        <Fragment>\n          <Navigation />\n          <Container>\n            <Row style={{ marginTop: 20}}>\n              <Col><SeedGenerator /></Col>\n              <Col><SeedOptions /></Col>\n            </Row>\n          </Container>\n          { isError && (\n            <Modal open={isError} toggle={this.clearError}>\n              <ModalHeader>Whoops</ModalHeader>\n              <ModalBody><FaBomb color=\"red\" style={{ verticalAlign: 'center' }} /> {errorText}</ModalBody>\n            </Modal>\n          )}\n          { isProcessing && (\n            <Modal open={isProcessing} toggle={() => {}}>\n              <ModalHeader>Generating Seed</ModalHeader>\n              <ModalBody style={{display: 'flex', flexDirection: 'column', justifyContent: 'center', alignItems: 'center'}}>\n                  <ClipLoader sizeUnit={\"px\"} size={150} color={'#123abc'} loading={true} />\n                  <span>Loading...</span>\n              </ModalBody>\n          </Modal>\n          )}\n        </Fragment>\n      );\n    }\n  }\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}