{"version":3,"sources":["components/navigation.jsx","stores/generator.js","components/seed-difficulty.jsx","components/seed-goal.jsx","components/seed-variant.jsx","components/seed-options.jsx","components/seed-generator.jsx","App.js","serviceWorker.js","index.js"],"names":["Navigation","react_default","a","createElement","shards_react_es","type","theme","href","React","Component","SeedGeneratorStore","isProcessing","isError","difficulty","goal","variant","firebird","seed","setError","action","val","_this","setProcessing","setSeed","setDifficulty","setGoal","setVariant","setFirebird","decorate","observable","seedGeneratorStore","SeedDifficulty","observer","_React$Component","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeDifficulty","bind","assertThisInitialized","inherits","createClass","key","value","_this2","inline","name","checked","onChange","SeedGoal","style","marginTop","SeedVariant","toggleFirebird","SeedOptions","seed_difficulty","seed_goal","seed_variant","SeedGenerator","state","showDownload","romUri","romName","spoilerUri","spoilerName","handleSubmit","handleDownloadRom","upload","fileInput","createRef","seedInput","fileToUpload","formData","buildFormData","fetch","method","body","response","parseResponse","file","setState","window","URL","createObjectURL","console","log","_context","t0","event","preventDefault","current","files","length","_this$state","document","appendChild","download","click","remove","required","className","ref","placeholder","e","target","min","onClick","FormData","append","cd","headers","get","idx","indexOf","substring","blob","App","clearError","react","navigation_Navigation","seed_generator_SeedGenerator","seed_options_SeedOptions","open","toggle","index_esm","color","verticalAlign","flex","justifyContent","alignContent","ClipLoader_default","sizeUnit","size","loading","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b6b9463.chunk.js","sourcesContent":["import React from 'react'\r\nimport { Navbar, NavbarBrand } from 'shards-react'\r\n\r\nexport default class Navigation extends React.Component {\r\n    render() {\r\n        return (\r\n            <Navbar type=\"dark\" theme=\"primary\">\r\n                <NavbarBrand href=\"#\">Illusion of Gaia Randomizer</NavbarBrand>\r\n            </Navbar>\r\n        )\r\n    }\r\n}","import {  observable, action, decorate } from 'mobx'\r\n\r\n\r\nclass SeedGeneratorStore {\r\n    isProcessing = false\r\n    isError = false    \r\n    difficulty = 'normal'\r\n    goal = 'Dark Gaia'\r\n    variant = 'None'\r\n    firebird = false\r\n    seed = 0\r\n\r\n    setError = action('setError', (val) => {\r\n        this.isError = val\r\n    })\r\n\r\n    setProcessing = action('setProcessing', (val) => {\r\n        this.isProcessing = val\r\n    })    \r\n\r\n    setSeed = action('setSeed', (seed) => {\r\n        this.seed = seed\r\n    })\r\n    \r\n    setDifficulty = action('setDifficulty', (difficulty) => {        \r\n        this.difficulty = difficulty\r\n    })\r\n\r\n    setGoal = action('setGoal', (goal) => {\r\n        this.goal = goal\r\n    })\r\n\r\n    setVariant = action('setVariant', (variant) => {\r\n        this.variant = variant\r\n    })\r\n\r\n    setFirebird = action('setFirebird', (firebird) => {\r\n        this.firebird = firebird\r\n    })\r\n}\r\n\r\ndecorate(SeedGeneratorStore, {\r\n    isProcessing: observable,\r\n    isError: observable,\r\n    seed: observable,\r\n    difficulty: observable,\r\n    goal: observable,\r\n    variant: observable,\r\n    firebird: observable\r\n})\r\n\r\nconst seedGeneratorStore = new SeedGeneratorStore()\r\nexport default seedGeneratorStore","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedDifficulty = observer(\r\n    class SeedDifficulty extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.changeDifficulty = this.changeDifficulty.bind(this)\r\n        }\r\n\r\n        changeDifficulty(difficulty) {\r\n            seedGeneratorStore.setDifficulty(difficulty)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Difficulty</CardTitle>\r\n                            <FormRadio inline name=\"easy\" checked={seedGeneratorStore.difficulty === \"easy\"} onChange={() => { this.changeDifficulty('easy')}}>Easy</FormRadio>\r\n                            <FormRadio inline name=\"normal\" checked={seedGeneratorStore.difficulty === \"normal\"} onChange={() => { this.changeDifficulty('normal')}}>Normal</FormRadio>\r\n                            <FormRadio inline name=\"hard\" checked={seedGeneratorStore.difficulty === \"hard\"} onChange={() => { this.changeDifficulty('hard')}}>Hard</FormRadio>\r\n                            <FormRadio inline name=\"extreme\" checked={seedGeneratorStore.difficulty === \"extreme\"} onChange={() => { this.changeDifficulty('extreme')}}>Extreme</FormRadio>\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedDifficulty","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedGoal = observer(\r\n    class SeedGoal extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setGoal = this.setGoal.bind(this)\r\n        }\r\n\r\n        setGoal(difficulty) {\r\n            seedGeneratorStore.setGoal(difficulty)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Goal</CardTitle>\r\n                            <FormRadio inline name=\"Dark Gaia\" checked={seedGeneratorStore.goal === \"Dark Gaia\"} onChange={() => { this.setGoal('Dark Gaia')}}>Dark Gaia</FormRadio>\r\n                            <FormRadio inline name=\"Red Jewel Hunt\" checked={seedGeneratorStore.goal === \"Red Jewel Hunt\"} onChange={() => { this.setGoal('Red Jewel Hunt')}}>Red Jewel Hunt</FormRadio>\r\n                            <FormRadio inline name=\"Random\" checked={seedGeneratorStore.goal === \"Random\"} onChange={() => { this.setGoal('Random')}}>Random</FormRadio>\r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedGoal","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Card, CardBody, CardTitle, Container, FormRadio, FormCheckbox } from 'shards-react'\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\n\r\nconst SeedVariant = observer(\r\n    class SeedVariant extends React.Component {\r\n        constructor(props) {\r\n            super(props)\r\n\r\n            this.setVariant = this.setVariant.bind(this)\r\n            this.setFirebird = this.toggleFirebird.bind(this)\r\n        }\r\n\r\n        setVariant(variant) {\r\n            seedGeneratorStore.setVariant(variant)\r\n        }\r\n\r\n        toggleFirebird(firebird) {\r\n            seedGeneratorStore.setFirebird(!seedGeneratorStore.firebird)\r\n        }\r\n\r\n        render() {\r\n            return (\r\n                <Container style={{marginTop: 20}}>\r\n                    <Card>                    \r\n                        <CardBody>\r\n                            <CardTitle>Variations</CardTitle>\r\n                            <FormRadio inline name=\"None\" checked={seedGeneratorStore.variant === \"None\"} onChange={() => { this.setVariant('None')}}>None</FormRadio>\r\n                            <FormRadio inline name=\"OHKO\" checked={seedGeneratorStore.variant === \"OHKO\"} onChange={() => { this.setVariant('OHKO')}}>One Hit KO</FormRadio>\r\n                            <FormCheckbox checked={seedGeneratorStore.firebird === true} onChange={() => { this.toggleFirebird()}}>Firebird</FormCheckbox>                            \r\n                        </CardBody>\r\n                    </Card>                            \r\n                </Container>\r\n            )\r\n        }\r\n    }\r\n)\r\n\r\nexport default SeedVariant","import React from 'react'\r\nimport {  Container } from 'shards-react'\r\nimport SeedDifficulty from './seed-difficulty';\r\nimport SeedGoal from './seed-goal';\r\nimport SeedVariant from './seed-variant';\r\n\r\nexport default class SeedOptions extends React.Component {\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <SeedDifficulty />\r\n                <SeedGoal />              \r\n                <SeedVariant />\r\n            </Container>\r\n        )\r\n    }\r\n}","import React from 'react'\r\nimport { Button, Card, CardBody, CardTitle, Container, Form, FormInput, FormGroup, Row } from \"shards-react\";\r\n\r\nimport seedGeneratorStore from '../stores/generator'\r\nimport SeedOptions from './seed-options';\r\n\r\nexport default class SeedGenerator extends React.Component {\r\n    state = {\r\n        showDownload: false,\r\n        romUri: null,\r\n        romName: null,\r\n        spoilerUri: null,\r\n        spoilerName: null\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n        this.handleDownloadRom = this.handleDownloadRom.bind(this)\r\n        this.upload = this.upload.bind(this)\r\n\r\n        this.fileInput = React.createRef();\r\n        this.seedInput = React.createRef();\r\n    }\r\n\r\n    async upload(fileToUpload) {\r\n        seedGeneratorStore.setProcessing(true)\r\n\r\n        let formData = this.buildFormData(fileToUpload)\r\n\r\n        try {\r\n            const response = await fetch('api/seed', {\r\n                method: 'POST',\r\n                body: formData\r\n            })\r\n\r\n            const { name, file } = await this.parseResponse(response)\r\n    \r\n            seedGeneratorStore.setProcessing(false)\r\n            seedGeneratorStore.setError(false)\r\n\r\n            this.setState({\r\n                showDownload: true,\r\n                romUri: window.URL.createObjectURL(file),\r\n                romName: name,\r\n            })  \r\n        }\r\n        catch(error) { \r\n            seedGeneratorStore.setProcessing(false)\r\n            seedGeneratorStore.setError(false)\r\n            console.log(error) \r\n        }\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n                \r\n        if (this.fileInput.current.files.length === 0) {            \r\n            seedGeneratorStore.setError(true)\r\n            return\r\n        }\r\n          \r\n        const file = this.fileInput.current.files[0]\r\n            \r\n        this.upload(file)\r\n    }\r\n    \r\n    handleDownloadRom() {\r\n        const { romUri, romName } = this.state\r\n    \r\n        var a = document.createElement('a')\r\n            document.body.appendChild(a)\r\n            a.style = 'display: none'\r\n            a.href = romUri\r\n            a.download = romName\r\n            a.click()\r\n            a.remove()\r\n    }\r\n\r\n    render() {\r\n        const { showDownload } = this.state\r\n\r\n        return (\r\n            <Container>\r\n                <Card>\r\n                    <CardBody>\r\n                        <CardTitle>Rom Details</CardTitle>\r\n                        <Row>\r\n                        <Form>\r\n                            <FormGroup>\r\n                            <label> ROM File (*.sfc):\r\n                                <input required className=\"form-control\" type=\"file\" ref={this.fileInput} />          \r\n                            </label>\r\n                            </FormGroup>\r\n                            <FormGroup>\r\n                                <label> Seed:\r\n                                <FormInput placeholder=\"123456\" onChange={(e) => seedGeneratorStore.setSeed(e.target.value) } type=\"number\" min=\"0\" />\r\n                                </label>\r\n                            </FormGroup>            \r\n                            <Button type=\"submit\" onClick={this.handleSubmit}>Generate ROM</Button>\r\n                        </Form>\r\n                </Row>\r\n                { showDownload && (\r\n                    <Row style={{marginTop: 20}}>\r\n                        <Button onClick={this.handleDownloadRom}>Download Randomized ROM</Button>\r\n                    </Row>\r\n                )}\r\n                    </CardBody>\r\n                </Card>\r\n                \r\n            </Container>            \r\n        )\r\n    }\r\n\r\n    buildFormData(fileToUpload) {\r\n        let formData = new FormData()\r\n        formData.append(null, fileToUpload)\r\n        formData.append('seed', seedGeneratorStore.seed)\r\n        formData.append('difficulty', seedGeneratorStore.difficulty)\r\n        formData.append('goal', seedGeneratorStore.goal)\r\n        formData.append('variant', seedGeneratorStore.variant)\r\n        formData.append('firebird', seedGeneratorStore.firebird)\r\n\r\n        return formData\r\n    }\r\n\r\n    async parseResponse(response) {\r\n        var cd = response.headers.get('content-disposition')  \r\n        var idx = cd.indexOf('filename=') + 9\r\n        \r\n        var name = cd.substring(idx)  \r\n        var file = await response.blob()  \r\n\r\n        return { name, file }\r\n    }\r\n}","import React, { Fragment } from 'react';\n\nimport { Container, Row, Col, Modal, ModalHeader, ModalBody } from \"shards-react\";\n\nimport { FaBomb } from 'react-icons/fa'\nimport ClipLoader from 'react-spinners/ClipLoader'\n\n\nimport Navigation from './components/navigation'\nimport SeedGenerator from './components/seed-generator'\n\nimport { observer } from 'mobx-react'\nimport seedGeneratorStore from './stores/generator'\nimport SeedOptions from './components/seed-options';\n\nconst App = observer(\n  class App extends React.Component {\n    state = {\n      isProcessing: false,\n      isError: false,\n      \n    }\n\n    constructor(props) {\n      super(props)\n\n      \n      this.clearError = this.clearError.bind(this)    \n    }\n\n    \n\n    clearError() {\n      seedGeneratorStore.setError(false)\n    }\n\n\n    render() {\n      const { isError, isProcessing } = seedGeneratorStore\n\n      return (      \n        <Fragment>\n          <Navigation />\n          <Container>\n            <Row style={{ marginTop: 20}}>\n              <Col><SeedGenerator /></Col>\n              <Col><SeedOptions /></Col>\n            </Row>\n          </Container>\n          { isError && (\n            <Modal open={isError} toggle={this.clearError}>\n              <ModalHeader>Whoops</ModalHeader>\n              <ModalBody><FaBomb color=\"red\" style={{ verticalAlign: 'center' }} /> Hey, man. You need to upload a ROM file.</ModalBody>\n            </Modal>\n          )}\n          { isProcessing && (\n            <Modal open={isProcessing} toggle={() => {}}>\n            <ModalHeader>Generating Seed</ModalHeader>\n            <ModalBody>\n              <div style={{flex: 1, justifyContent: 'center', alignContent: 'center'}}>\n                <ClipLoader sizeUnit={\"px\"} size={150} color={'#123abc'} loading={true} />\n                <span>Loading...</span>\n              </div>\n              </ModalBody>\n          </Modal>\n          )}\n        </Fragment>\n      );\n    }\n  }\n)\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"shards-ui/dist/css/shards.min.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}